vim: syntax=python

"""
Python solution for Reverse a Linked List in Groups problem at https://www.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1
difficulty: hard
input is the head node of a linked list and an integer, k
goal is to reverse the order of each group* of k nodes within the list and return the new head node
*if the number of nodes is not a multiple of k, then the remaining nodes at the end should be reversed as a group
time complexity is O(n), auxiliary space is O(1)
"""
class Solution:
    def reverse(self, head, k):
        # list has only one node, the head
        if not head.next:
            return head
        # keep reference to what will be the tail of the first group to link up to the second
        currTail = head
        # grab first two nodes to reverse order
        currNode = head
        nextNode = head.next
        # keep count of nodes in the group of k
        nodes = 1
        while nodes < k:
            # reverse order while traversing the list until k nodes are reached
            temp = nextNode.next
            nextNode.next = currNode
            currNode = nextNode
            nextNode = temp
            nodes += 1
        # keep reference to the new head of the full list
        returnHead = currNode
        # list had only k nodes
        if not nextNode:
            # remove link from tail of list and return
            currTail.next = None
            return returnHead
        
        # list has more than k nodes
        while True:
            # restart count of nodes in next group of k
            nodes = 1
            # grab first two nodes to reverse order
            currNode = nextNode
            nextNode = nextNode.next
            # keep reference to the tail of this next group
            nextTail = currNode
            # reverse order while traversing the list until k nodes are reached
            while nodes < k:
                # list ended before reaching k nodes
                if not nextNode:
                    # link up previous group's tail to this group's head
                    currTail.next = currNode
                    # terminate list at this group's tail and return
                    nextTail.next = None
                    return returnHead
                # reverse order and move to the next nodes
                temp = nextNode.next
                nextNode.next = currNode
                currNode = nextNode
                nextNode = temp
                # increment node count tracker
                nodes += 1
            # finished full group of k nodes, link up previous group's tail to this group's head
            currTail.next = currNode
            # keep reference to this group's tail for moving on to the next group
            currTail = nextTail
            # no nodes remain
            if not nextNode:
                # remove link from tail of list and return
                currTail.next = None
                return returnHead
            
            # list contains more nodes, continue loop
