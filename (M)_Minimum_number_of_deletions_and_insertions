vim: syntax=python

"""
Python solution for Minimum number of deletions and insertions problem at https://www.geeksforgeeks.org/problems/minimum-number-of-deletions-and-insertions0209/1
difficulty: medium
inputs are two strings, str1 & str2
goal is to return the number of character deletions and insertions required to transform str1 into str2
time complexity and auxiliary space both O(|str1| * |str2|)
"""
class Solution:
	def minOperations(self, str1, str2):
		# finds length of longest common subsequence of the strings
		def longestCommonSubsequence(str1, str2):
		    # initialize a matrix of 0s
		    matrix = [[0 for i in range(len(str2) + 1)] for j in range(len(str1) + 1)]
		    # populate matrix
		    for i in range(len(str1) + 1):
		        for j in range(len(str2) + 1):
		            # first row, column of matrix all remain 0s
		            if i == 0 or j == 0:
		                continue
                    # checked characters in strings match
                    elif str1[i - 1] == str2[j - 1]:
                        # add one to length of lcs for these characters
                        matrix[i][j] = matrix[i - 1][j - 1] + 1
                    # checked characters don't match
                    else:
                        # carry forward adjacent value
                        matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])
            # return length of lcs from final cell of matrix
            return matrix[len(str1)][len(str2)]
        
		# get length of longest common subsequence of the strings
		lcs = longestCommonSubsequence(str1, str2)
		# return deletions (|str1| - lcs) + insertions (|str2| - lcs)
		return (len(str1) - lcs) + (len(str2) - lcs)
